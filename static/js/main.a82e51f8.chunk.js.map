{"version":3,"sources":["components/Filter/Filter.module.css","components/Contacts.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.js","redux/contacts/contacts.actions.js","redux/contacts/contactsSelector.js","components/Filter/Filter.js","redux/contacts/contacts.operations.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Contacts.js","App.js","redux/contacts/contacts.reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","ContactForm","state","name","number","handleChange","evt","setState","target","value","onSubmit","preventDefault","props","handleSubmit","className","styles","form","this","title","onChange","type","pattern","required","btn","Component","addNewContactsRequest","createAction","addNewContactsSuccess","addNewContactsError","getAllContactsRequest","getAllContactsSuccess","getAllContactsError","filterChange","removeContactsRequest","removeContactsSuccess","removeContactsError","getFilterContactsSelector","contacts","items","formattedFilter","filter","toLowerCase","trim","item","includes","getFormatFilterSelector","console","log","contactsFilterSelector","mapDispatchToProps","connect","block","htmlFor","id","input","axios","defaults","baseURL","ContactsListItem","handleDelete","textContent","onClick","dispatch","a","delete","ul","map","Contacts","term","some","alert","newContacts","addNewContacts","titleContact","mapDispatch","contact","getState","post","data","getAllContacts","get","App","loading","createReducer","_","action","payload","todosReducer","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a82e51f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Filter_block__3KLzL\",\"title\":\"Filter_title__1Pl-q\",\"input\":\"Filter_input__2KJgh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Contacts_title__3kiqO\",\"titleContact\":\"Contacts_titleContact__2uhrP\",\"block\":\"Contacts_block__2kK-h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactListItem_btn__2HQsc\",\"textContent\":\"ContactListItem_textContent__3QENC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ul\":\"ContactList_ul__2HGKG\"};","import React, { Component } from \"react\";\n// import { v4 as uuid } from \"uuid\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ContactForm.module.css\";\n\nclass ContactForm extends Component {\n  static propTypes = {\n    handleSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    // id: uuid(),\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (evt) => {\n    this.setState({ [evt.target.name]: evt.target.value });\n  };\n\n  onSubmit = (evt) => {\n    evt.preventDefault();\n\n    this.props.handleSubmit(this.state);\n\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <>\n        <form className={styles.form} onSubmit={this.onSubmit}>\n          <span className={styles.title}>Name</span>\n          <input\n            onChange={this.handleChange}\n            value={this.state.name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n          <span className={styles.title}>Number</span>\n          <input\n            name=\"number\"\n            type=\"tel\"\n            onChange={this.handleChange}\n            value={this.state.number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n          <button className={styles.btn} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nexport default ContactForm;\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst addNewContactsRequest = createAction(\"contacts/addNewContactsRequest\");\nconst addNewContactsSuccess = createAction(\"contacts/addNewContactsSuccess\");\nconst addNewContactsError = createAction(\"contacts/addNewContactsError\");\n\nconst getAllContactsRequest = createAction(\"contacts/getAllContactsRequest\");\nconst getAllContactsSuccess = createAction(\"contacts/getAllContactsSuccess\");\nconst getAllContactsError = createAction(\"contacts/getAllContactsError\");\n\nconst filterChange = createAction(\"contacts/filterChange\");\n\nconst removeContactsRequest = createAction(\"contacts/removeContactsRequest\");\nconst removeContactsSuccess = createAction(\"contacts/removeContactsSuccess\");\nconst removeContactsError = createAction(\"contacts/removeContactsError\");\n\nexport {\n  addNewContactsRequest,\n  addNewContactsSuccess,\n  addNewContactsError,\n  getAllContactsRequest,\n  getAllContactsSuccess,\n  getAllContactsError,\n  filterChange,\n  removeContactsRequest,\n  removeContactsSuccess,\n  removeContactsError,\n};\n","export const getFilterContactsSelector = (state) => {\r\n  const { items, filter } = state.contacts;\r\n\r\n  const formattedFilter = filter.toLowerCase().trim();\r\n  const filteredItems = items.filter((item) =>\r\n    item.name.toLowerCase().includes(formattedFilter)\r\n  );\r\n  return filteredItems;\r\n};\r\n\r\nexport const getFormatFilterSelector = (state) => {\r\n  const items = state.contacts.items;\r\n  const filter = state.contacts.filter;\r\n  console.log(filter);\r\n  const formattedFilter = filter.toLowerCase().trim();\r\n  const filteredItems = items.filter((item) =>\r\n    item.name.toLowerCase().includes(formattedFilter)\r\n  );\r\n  return {\r\n    items: filteredItems,\r\n    filter: state.filter,\r\n  };\r\n};\r\n\r\nexport const contactsFilterSelector = (state) => state.contacts.filter;\r\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { filterChange } from \"../../redux/contacts/contacts.actions\";\nimport { contactsFilterSelector } from \"../../redux/contacts/contactsSelector\";\n\nimport styles from \"./Filter.module.css\";\n\nconst Filter = ({ handleChange, filter }) => {\n  return (\n    <div className={styles.block}>\n      <label className={styles.title} htmlFor=\"filter\">\n        Find contacts by name:\n      </label>\n      <input\n        id=\"filter\"\n        name=\"filter\"\n        type=\"text\"\n        className={styles.input}\n        onChange={handleChange}\n        value={filter}\n      />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    filter: contactsFilterSelector(state),\n  };\n};\n\nconst mapDispatchToProps = {\n  handleChange: filterChange,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import axios from \"axios\";\r\nimport {\r\n  getAllContactsRequest,\r\n  getAllContactsSuccess,\r\n  getAllContactsError,\r\n  addNewContactsRequest,\r\n  addNewContactsSuccess,\r\n  addNewContactsError,\r\n  removeContactsRequest,\r\n  removeContactsSuccess,\r\n  removeContactsError,\r\n} from \"./contacts.actions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:3001/\";\r\n\r\nconst addNewContacts = (contact) => async (dispatch, getState) => {\r\n  dispatch(addNewContactsRequest());\r\n  try {\r\n    const { data } = await axios.post(\"contacts\", contact);\r\n    dispatch(addNewContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addNewContactsError(error));\r\n  }\r\n};\r\n\r\nconst getAllContacts = () => async (dispatch) => {\r\n  dispatch(getAllContactsRequest());\r\n  try {\r\n    const { data } = await axios.get(\"contacts\");\r\n    dispatch(getAllContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(getAllContactsError(error));\r\n  }\r\n};\r\n\r\nconst removeContacts = (id) => async (dispatch) => {\r\n  dispatch(removeContactsRequest());\r\n  try {\r\n    await axios.delete(`contacts/${id}`);\r\n    dispatch(removeContactsSuccess(id));\r\n  } catch (error) {\r\n    dispatch(removeContactsError(error));\r\n  }\r\n};\r\n\r\nexport { addNewContacts, getAllContacts, removeContacts };\r\n","import PropTypes from \"prop-types\";\n// import { connect } from \"react-redux\";\n// import { getContactsListItemSelector } from \"../../redux/contacts/contactsSelector\";\nimport styles from \"./ContactListItem.module.css\";\nconst ContactsListItem = ({ item, handleDelete }) => {\n  const { name, number } = item;\n\n  return (\n    <li>\n      <div className={styles.textContent}>\n        <span>\n          {name}: {number}\n        </span>\n        <button className={styles.btn} onClick={handleDelete}>\n          X\n        </button>\n      </div>\n    </li>\n  );\n};\n\nContactsListItem.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactsListItem;\n\n// ContactsListItem.propTypes = {\n//   items: PropTypes.array.isRequired,\n// };\n\n// const mapStateToProps = (state) => {\n//   return {\n//     items: getContactsListItemSelector(state),\n//   };\n// };\n\n// const MapDispatchToProps = {\n//   handleDelete: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, MapDispatchToProps)(ContactsListItem);\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { removeContacts } from \"../../redux/contacts/contacts.operations\";\nimport ContactsListItem from \"../ContactListItem/ContactListItem\";\nimport styles from \"./ContactList.module.css\";\nimport { getFilterContactsSelector } from \"../../redux/contacts/contactsSelector\";\nconst ContactsList = ({ items, handleDelete }) => {\n  return (\n    <>\n      <ul className={styles.ul}>\n        {items.map((item) => (\n          <ContactsListItem\n            key={item.id}\n            item={item}\n            handleDelete={() => handleDelete(item.id)}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nContactsList.propTypes = {\n  items: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    items: getFilterContactsSelector(state),\n  };\n};\n\nconst mapDispatchToProps = {\n  handleDelete: removeContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import { Component } from \"react\";\n// import { v4 as uuid } from \"uuid\";\nimport ContactForm from \"./ContactForm/ContactForm\";\nimport Filter from \"./Filter/Filter\";\nimport ContactsList from \"./ContactList/ContactList\";\nimport styles from \"./Contacts.module.css\";\n\nimport { connect } from \"react-redux\";\nimport {\n  addNewContacts,\n  getAllContacts,\n} from \"../redux/contacts/contacts.operations\";\nimport { getFormatFilterSelector } from \"../redux/contacts/contactsSelector\";\n\nclass Contacts extends Component {\n  state = {\n    items: [],\n    filter: \"\",\n  };\n\n  handleSubmit = (term) => {\n    if (!term) {\n      alert(\"Поле не может быть пустым!\");\n      return;\n    }\n\n    const isDuplicate = this.state.items.some(\n      (item) => item.name === term.name\n    );\n    if (isDuplicate) {\n      alert(\"Контакт: \" + term.name + \" уже существует \");\n      return;\n    }\n\n    const newContacts = {\n      // id: uuid(),\n      name: term.name,\n      number: term.number,\n    };\n    this.props.addNewContacts(newContacts);\n  };\n\n  render() {\n    const { items, filter } = this.props;\n\n    return (\n      <div className=\"container\">\n        <h1 className={styles.title}>Phonebook</h1>\n        <ContactForm handleSubmit={this.handleSubmit} />\n        <h2 className={styles.titleContact}>Contacts</h2>\n        <div className={styles.block}>\n          <Filter filter={filter} handleChange={this.props.handleChange} />\n          <ContactsList items={items} handleDelete={this.props.handleDelete} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    items: getFormatFilterSelector(state),\n    filter: state.filter,\n  };\n};\n\nconst mapDispatch = {\n  addNewContacts,\n  getAllContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatch)(Contacts);\n","import React from \"react\";\nimport Contacts from \"./components/Contacts\";\n\n\nconst App = () => {\n  return (\n    <div className=\"block\">\n      <Contacts />\n    </div>\n  );\n};\n\nexport default App;","import { combineReducers, createReducer } from \"@reduxjs/toolkit\";\nimport {\n  addNewContactsRequest,\n  addNewContactsSuccess,\n  addNewContactsError,\n  getAllContactsRequest,\n  getAllContactsSuccess,\n  getAllContactsError,\n  filterChange,\n  removeContactsRequest,\n  removeContactsSuccess,\n  removeContactsError,\n} from \"./contacts.actions\";\n\nconst loading = createReducer(false, {\n  [getAllContactsRequest]: () => true,\n  [getAllContactsSuccess]: () => false,\n  [getAllContactsError]: () => false,\n  [addNewContactsRequest]: () => true,\n  [addNewContactsSuccess]: () => false,\n  [addNewContactsError]: () => false,\n  [removeContactsRequest]: () => true,\n  [removeContactsSuccess]: () => false,\n  [removeContactsError]: () => false,\n});\n\nconst items = createReducer([], {\n  [getAllContactsSuccess]: (_, action) => action.payload,\n  [addNewContactsSuccess]: (state, action) => [action.payload, ...state],\n  [removeContactsSuccess]: (state, action) =>\n    state.filter((item) => item.id !== action.payload),\n});\n\nconst filter = createReducer(\"\", {\n  [filterChange]: (_, action) => action.payload,\n});\n\nconst todosReducer = combineReducers({\n  items,\n  filter,\n  loading,\n});\n\nexport default todosReducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport contactsReducer from \"./contacts/contacts.reducer\";\n\nconst store = configureStore({\n  reducer: { contacts: contactsReducer },\n});\n\nexport default store;\n// ================================\n// import { createStore } from \"redux\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n// import rootReducer from \"./RootReducer\";\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;\n\n// ===============================OLD\n\n// import { createStore } from \"redux\";\n// import rootReducer from \"./RootReducer\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// export default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2N6--\",\"title\":\"ContactForm_title__72EaT\",\"btn\":\"ContactForm_btn__1BNJ1\"};"],"sourceRoot":""}